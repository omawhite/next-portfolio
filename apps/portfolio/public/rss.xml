<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Articles by Omar Louis White</title>
        <link>https://louiswhite.me</link>
        <description>The feed for my blog</description>
        <lastBuildDate>Sat, 16 Mar 2024 17:19:44 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[So I broke my website]]></title>
            <link>https://louiswhite.me/so-i-broke-my-website</link>
            <guid>so-i-broke-my-website</guid>
            <pubDate>Invalid Date</pubDate>
            <content:encoded><![CDATA[A few weeks ago I was out at the library working on some side projects to kill time before heading to a movie at my favorite local [popup theater](https://cicadacinema.com), when I noticed I couldn't reach my blog. When I tried to navigate to my site I was met with the a "Connection timed out" in my browser indicating that Cloudflare was having trouble reaching my site.

![A "Connection timed out" status page from cloudflare](/media/screenshot-2023-11-19-at-4.23.32-pm.png)

I had recently moved my DNS from [Namecheap](https://www.namecheap.com/) over to [Cloudflare](https://www.cloudflare.com/application-services/products/dns/) so that I could setup domain names with proper SSL certs for my homelab(if you want to learn more about that check out this [video](https://youtu.be/qlcVx-k-02E?si=rhqwsCoctZ_VYObw)). When I setup DNS for my site I thought it would be a good idea to take advantage of Cloudflare's ability to [proxy dns records](https://developers.cloudflare.com/dns/manage-dns-records/reference/proxied-dns-records/). This feature is great in some contexts, it can speed up your DNS requests due to Cloudflare's caching, hides your IP address from bad actors, and makes you less vulnerable to DDOS attacks, but had unintended consequences in my situation.

## A Rookie mistake

In retrospect I should have realized proxying the DNS I use for my sites hosted on netlify didn't make much sense. Netlify already handles caching so I don't need Cloudflare to do it for me, there's no need for me to be concerned about protecting netlify's IP addresses, and they already have measures in place to handle their own [security](https://www.netlify.com/security/) and prevent DDOS attacks. However I didn't realize this until I came across this [article](https://stevepolito.design/blog/configure-cloudflare-dns-to-work-with-netlify) which helped me realize you need to turn off the proxying option when pointing your DNS towards netlify. Further research brought me to this [form post](https://answers.netlify.com/t/support-guide-what-problems-could-occur-when-using-cloudflare-in-front-of-netlify/138) as well a [blog post](https://www.netlify.com/blog/2017/03/28/why-you-dont-need-cloudflare-with-netlify/) by netlify where they explain in further detail why their services don't play well with proxied dns through Cloudflare. Once I stopped proxying the domains for my site and re-setup the domains in netlify I was good to go, but I wanted assurances that another silly mistake like this wouldn't take down my site without me knowing.

## Enter Upptime

A quick google search on open source uptime monitoring tools brought me to [upptime](https://upptime.js.org). Upptime uses a combination of github actions to run checks against your site and then builds you a status page using github pages. It's a really great free way to have some basic monitoring for side projects, assuming you run it in a public github repo. It took me all of 10 minutes to get it up and running for my site, you can see my repo [here](https://github.com/omawhite/portfolio-uptime-monitor) and the status page [here](https://upptime.louiswhite.me).

## Future improvements

Upptime makes it really easy to get up and running quickly with the basics and the status page they provide to you out of the box is great however a status page only does you any good if you check it regularly. Because of this Upptime also lets you setup [notifications](https://upptime.js.org/docs/notifications) so that you can be aware of any outages. They support a good handful of providers including Slack and Microsoft teams, which is great for teams already invested in those tools, as well as email and sms. Since I'm just a single person running a website mostly for fun I don't have any kind of infrastructure already in place to do alerting and don't feel like setting up Slack, Discord, or Teams(I've used teams before at work I hate it with a passion) just for this, so I'm leaning towards using [Telegram to create myself an alerts bot](https://core.telegram.org/bots#6-botfather).
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Automating My Crate Digging with youtube-dl]]></title>
            <link>https://louiswhite.me/automating-my-crate-digging-with-youtube-dl</link>
            <guid>automating-my-crate-digging-with-youtube-dl</guid>
            <pubDate>Invalid Date</pubDate>
            <content:encoded><![CDATA[
Many producers already know this, but for those unaware, Youtube is an amazing
place to discover new songs to sample. Over the past few years I've tailored
my feed to frequently surface great sampling candidates. The one downside is
that actually capturing those samples from Youtube can be tedious. The main
options are:

1. Install a browser extension to record a clip of the video.
2. Manually record the audio from Youtube into a sampler or audio interface.
3. Use a Youtube to MP3 site to download the full audio.

I tended to use option 3 since it integrated easily into my workflow. However, I wondered - could this be automated? As a developer, I figured building a script to handle this would not be too complex.

It turns out there is already a utility called [youtube-dl](https://github.com/ytdl-org/youtube-dl) that downloads Youtube videos. I could have used it directly, but wanted to simplify the interface by wrapping it in a Node script. My goal was to easily download samples from specified playlists without worrying about command line options.

In an afternoon's work, I had a functioning script. It mostly meets my needs, but there are areas for improvement:

- Streamline installation requirements (Node, FFmpeg, etc)
- Run periodically to check for new videos
- Integrate with Dropbox for simplified file management

Since starting this project, I discovered [youtube-dl-gui](https://github.com/StefanLobbenmeier/youtube-dl-gui), an excellent cross-platform UI for youtube-dl. For my use case, its only missing feature is something similar to the `download-archive` option that the cli has, which ensures the utility only downloads videos that haven't already been downloaded. Still, for most people, I would recommend this app over questionable Youtube converter sites.

For other ideas to extend this project, see the [GitHub issues](https://github.com/omawhite/node-youtube-crate-digger/issues). Contributions are also welcome! Please let me know in the comments if you have experience with youtube-dl or similar tools, or if you've built any custom automation for your creative workflow.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[So tomorrow I start at Unicycle]]></title>
            <link>https://louiswhite.me/so-tomorrow-i-start-at-unicycle</link>
            <guid>so-tomorrow-i-start-at-unicycle</guid>
            <pubDate>Invalid Date</pubDate>
            <content:encoded><![CDATA[
So tomorrow I start at Unicycle. It will be the second job of my career as a software engineer. After about 4 years at Target its a big change of pace. I'm going from a huge fortune 50 company to a small startup where I'll be like the 3rd or 4th engineer(depending on when the other new person starts). This change has had me reflecting a lot for the past 2 weeks so I wanted to take some time to write about burnout, reflect on leaving target, and talk about taking a break between gigs.

## Thoughts on leaving Target

I was burnt out at Target. Which is a sad thing for me to admit, I still remember there was a time when I wasn't. My career was progressing, I felt like I was learning a ton, and I made a lot of work friends that would eventually become some of my best friends. I went from not knowing any javascript when I started my first TLP rotation on the web team to getting promoted to senior, mentoring engineers, and even implementing Apple pay on target.com. Web was the right place for me to start my career and I'm grateful for all the positive experiences I had.

But things eventually changed. 2020 was a hard year, for obvious reasons, and when 2021 rolled around I expected things to get better as the “new normal” started to really set in, but they didn’t. I was working way harder than I had been prior to the pandemic, leading a team, mentoring multiple engineers at once, helping product grooming the backlog, and generally running myself ragged.

Leadership had committed to too many priorities for the amount of engineering bandwidth they had. As part of a larger web initiative we were trying to migrate the cart & checkout portions of the site to a new architecture while simultaneously trying to build new features for cart & checkout on the old architecture. I think this would have been overly ambitious for most engineering teams, but ours was particularly disadvantaged because we didn’t have the depth at the senior & lead level to be attempting this. Upon reflection I think this really set me up on a path towards rapid burnout.

For a while I told myself it would all be worth it once I got promoted to lead engineer, or that if I kept grinding maybe I would get a raise along the way to make it worth it, or that I wasn’t ready to start interviewing yet. I saw friends of mine on various teams that made up web leave for better opportunities, they had realized something that would take me a few more months to grasp, that the grind wasn’t worth it and that we could be making more money in a job we were happier with.

If you’re reading this and find yourself in a similar situation It might be time to seriously consider look for a new job yourself. If you’ve got even a little bit of job experience as a software engineer then the market is hot right now, dust of your resume and go for it! I was pretty anxious when I started interviewing, but I’m so glad I worked past that anxiety and went for it. I’m getting ready to start a new job working with a group of talented folks that I’m genuinely excited to work with, that could be you too, you just have to go find it. At the very least you could probably make a lot more money putting in a work environment similar to what you currently have.

## Taking breaks between jobs is fantastic you should try it

One of the things that really made me feel validated in my decision to join Unicycle was my the fact that the engineering director encouraged me to take a break before starting. I wasn't going to do it at first, I even emailed Unicycle to tell them I would be starting the Monday after my last day at Target. Thankfully they were very flexible with me and emphasized the fact that my start date could be flexible, so I ended up giving myself a 2 week funemployment break between jobs. To me this seems to indicate that I’m moving to a company much more concerned with their employees well being, one that is more mindful about burnout, even though it’s a startup.

I'll admit the idea of not having a job for 2 weeks was a little scary at first. I was worried about being able to keep my budget intact during the gap between my last target paycheck and my first Unicycle paycheck, but even with that anxiety taking this break has been worth it. I can be a bit of a workaholic so I think this downtime was an important lesson for me. I was really tempted to fill the time with a bunch of activities and side projects so that I wouldn't "waste" it, and I did spend some of the time doing projects like working on this blog, but I realized that I didn't need to put all this pressure on it. I'm still not perfect at it, but I'm beginning to really understand the value of rest. You don't have to always be working on something, you've got to balance out the drive and ambition with periods of rest to take proper care of yourself. So while I didn't accomplish all the things I would have liked to during these 2 weeks I still had a great time. I migrated my blog to nextjs, went a saw Venom 2(which was so bad in the best way possible) during the middle of a random Wednesday, and recorded some music with my friends. I chalk that up as a win! If you are in a position where you can take a break between jobs I highly recommend it.

And so after 2 solid weeks of rest, relaxation, and reflection I'm feeling pretty good, I'm feeling recharged a bit. I’m really excited to be moving into the next phase of my career, and while I was dissatisfied with my experience at target towards the end, I have no regrets. I learned so much these past 4 years, I grew in ways I didn’t imagine were possible before I worked on target.com and met some fantastic people along the way. Leaving was bitter sweet, but it was time for something new, so tomorrow I start at Unicycle.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How I Ended Up A Software Engineer]]></title>
            <link>https://louiswhite.me/how-i-ended-up-a-software-engineer</link>
            <guid>how-i-ended-up-a-software-engineer</guid>
            <pubDate>Invalid Date</pubDate>
            <content:encoded><![CDATA[
The other day I was cleaning out my inbox when I came across a message from [Code Academy](https://www.codecademy.com/). I quickly deleted the message and unsubscribed from their email updates since I hadn't used the platform in ages. In doing so, I came to the realization that I've come a long way since the beginning of my burgeoning interest in technology. Starting from my senior year of high school to this past year; I've made incredible strides towards my ever evolving goal of becoming an in demand/great engineer.

When I was a high school senior, I was trying to figure out my college major and/or what I might want to do as a career. Learning to program seemed like an impossible goal to me. I had an interest in technology, and had even dabbled in some HTML - copying and pasting of basic javascript, etc.., but I had yet to really learn any significant programming skills. I tried to learn on my own, going over tutorials or using online learning sites like Code Academy, but nothing really clicked, so to speak. Unable to progress very far on my own, I thought that perhaps an instructor led course might help, so I enrolled in my school’s only computer programming class - I’m not complaining btw, I know most high school’s probably have none... At first it was great, we started learning with [scratch](https://scratch.mit.edu/), which is a simple visual based programming language. It was incredibly easy to get started with scratch. It allowed me to create simple games and other engaging things that made learning to program fun and interesting. Something I needed at the time. Because of this, I was a bit more confident when we moved on to Visual Basic and eventually Java. The fun aspect faded a bit at this point, and the learning curve got much more difficult.

For the Java/Visual Basic part of the course, we were given books to read from, and were expected to go through them chapter by chapter completing the exercises without much guidance; this proved to be very difficult for me. I wasn't getting much value out of reading the books myself, and there were no lectures, because the instructor didn't have any programing knowledge himself. He was just the teacher that did some of the business focused electives at my high school, and somehow programming fell under his jurisdiction. So after I spent the remainder of the semester struggling with Java and VB, I was thoroughly convinced that programming wasn't my calling, but I really wanted to study technology, so I decided to study [Informatics,](https://www.informatics.indiana.edu/) with the intention of eventually becoming a consultant or business analyst.

During my sophomore year at Indiana University, I decided to take a second shot at learning to program. This time around, the courses I took seemed to be what I needed to develop a foundation that allowed me to become more confident in my abilities. I made a pact with a friend to choose a Computer Science minor, as we both wanted to become software engineers. I was determined to conquer the challenge that once seemed impossible to me. It was difficult, but different this time. I had professors that I could go to with questions, lectures that I could follow and properly take notes on, other students around me that I could work with, and learn from. This type of learning environment proved to be what I needed to finally have a breakthrough. Slowly but surely, the basic concepts around Computer Science and programming started to make more sense to me, once that happened, I couldn't get enough. I was hooked.

Continuous learning is a must for anyone who has a tech career. In my first 6 months as a software engineer, I had the pleasure of working with a very talented group of people on the Cloud Platform Engineering team. When I started, I barely understood what Docker was, let alone the value of containerization, but I'm leaving that team with two open source contributions to the [Spinnaker Project](https://www.spinnaker.io/) under my belt. My next assignment will be be one that focuses more on front end engineering. I'm definitely eager to add to my Javascript skills/knowledge by working with this team.

I write all of this to try and get across the following point: don’t be discouraged if you are attempting to learn to program/code, or otherwise immerse yourself in the world of technology. Everyone has a different story, and a different path. Don’t get discouraged if things aren't “clicking” at first. Again, everyone is different, and while not every single person may end up a software engineer, there is a place for all kinds of people in the world of technology. The tricky part is figuring out where you fit, how you learn, and what kinds of things motivate you. So if you're struggling at the moment, don't worry! Find a mentor, or a friend to try and learn with. Keep trying different approaches to learning until something finally works. Also, to those of us who are well beyond that initial learning phase, reach out to those who aren't. Encourage someone who is just starting out, mentor them a bit, point them to some resources that helped you out, answer their questions. That way we can continue to grow this industry and make sure its filled with fresh faces, new perspectives, and diverse groups of people.
]]></content:encoded>
        </item>
    </channel>
</rss>